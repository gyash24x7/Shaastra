generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String   @id
    name     String
    email    String   @unique
    username String   @unique
    password String
    verified Boolean  @default(false)
    roles    String[]
}

model Token {
    id        String   @id @default(cuid())
    hash      String
    userId    String
    expiry    DateTime
    createdAt DateTime @default(now())
}

enum Department {
    WEBOPS
    SPONSORSHIP_AND_PR
    SHOWS_AND_EXHIBITIONS
    EVENTS_AND_WORKSHOPS
    OPERATIONS_AND_INFRASTRUCTURE_PLANNING
    EVOLVE
    ENVISAGE
    FINANCE
    CONCEPT_AND_DESIGN
    PUBLICITY
    QMS
}

enum MemberPosition {
    COORD
    HEAD
    CORE
    COCAS
}

model Member {
    id                  String         @id @default(cuid())
    name                String
    email               String         @unique
    rollNumber          String         @unique
    profilePic          String         @default("")
    coverPic            String         @default("")
    mobile              String
    upi                 String         @default("")
    about               String         @default("")
    department          Department
    position            MemberPosition
    enabled             Boolean        @default(false)
    teams               Team[]
    teamsCreated        Team[]         @relation("TeamCreatedBy")
    tasksCreated        Task[]         @relation("TaskCreatedBy")
    tasksAssigned       Task[]         @relation("TaskAssignee")
    taskCommentsCreated TaskComment[]  @relation("TaskCommentCreatedBy")
}

model Team {
    id          String     @id @default(cuid())
    name        String     @unique
    department  Department
    members     Member[]
    createdBy   Member     @relation("TeamCreatedBy", fields: [createdById], references: [id])
    createdById String
}

enum TaskStatus {
    NOT_ASSIGNED
    ASSIGNED
    IN_PROGRESS
    SUBMITTED
    APPROVED
    COMPLETED
}

enum ActivityType {
    CREATED
    STATUS_CHANGED
    UPDATED
    DELETED
}

model Task {
    id            String         @id @default(cuid())
    title         String
    description   String
    status        TaskStatus     @default(NOT_ASSIGNED)
    createdById   String
    createdBy     Member         @relation("TaskCreatedBy", fields: [createdById], references: [id])
    assigneeId    String?
    assignee      Member?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
    createdAt     DateTime       @default(now())
    deadline      DateTime
    byDepartment  Department
    forDepartment Department
    activity      TaskActivity[] @relation("TaskActivityRelatedTo")
    comments      TaskComment[]  @relation("TaskCommentRelatedTo")
}

model TaskActivity {
    id          String       @id @default(cuid())
    title       String
    description String
    taskId      String
    task        Task         @relation("TaskActivityRelatedTo", fields: [taskId], references: [id])
    type        ActivityType
    createdAt   DateTime
}

model TaskComment {
    id          String   @id @default(cuid())
    content     String
    createdBy   Member   @relation("TaskCommentCreatedBy", fields: [createdById], references: [id])
    createdById String
    task        Task     @relation("TaskCommentRelatedTo", fields: [taskId], references: [id])
    taskId      String
    createdAt   DateTime @default(now())
}
