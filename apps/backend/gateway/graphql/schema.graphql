schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input AddMembersInput
  @join__type(graph: WORKFORCE)
{
  teamId: String!
  memberIds: [String!]!
}

input AddTaskCommentInput
  @join__type(graph: EQUIP)
{
  taskId: String!
  content: String!
}

input AssignTaskInput
  @join__type(graph: EQUIP)
{
  taskId: String!
  assigneeId: String!
}

input CreateMemberInput
  @join__type(graph: WORKFORCE)
{
  id: String!
  name: String!
  email: String!
  rollNumber: String!
  department: String!
  mobile: String!
}

input CreateTaskInput
  @join__type(graph: EQUIP)
{
  title: String!
  description: String!
  deadline: String!
  forDepartment: String!
}

input CreateTeamInput
  @join__type(graph: WORKFORCE)
{
  name: String!
  department: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime
  @join__type(graph: EQUIP)

input EnableMemberInput
  @join__type(graph: WORKFORCE)
{
  id: String!
}

scalar join__DirectiveArguments

scalar join__FieldSet

enum join__Graph {
  EQUIP @join__graph(name: "equip", url: "http://localhost:8010/api/graphql")
  WORKFORCE @join__graph(name: "workforce", url: "http://localhost:8000/api/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Member
  @join__type(graph: EQUIP, key: "id", extension: true)
  @join__type(graph: WORKFORCE, key: "id")
{
  id: ID!
  tasksAssigned: [Task!]! @join__field(graph: EQUIP)
  tasksCreated: [Task!]! @join__field(graph: EQUIP)
  name: String! @join__field(graph: WORKFORCE)
  email: String! @join__field(graph: WORKFORCE)
  rollNumber: String! @join__field(graph: WORKFORCE)
  department: String! @join__field(graph: WORKFORCE)
  position: String! @join__field(graph: WORKFORCE)
  profilePic: String! @join__field(graph: WORKFORCE)
  coverPic: String! @join__field(graph: WORKFORCE)
  mobile: String! @join__field(graph: WORKFORCE)
  upi: String! @join__field(graph: WORKFORCE)
  about: String! @join__field(graph: WORKFORCE)
  teams: [Team!]! @join__field(graph: WORKFORCE)
}

type Mutation
  @join__type(graph: EQUIP)
  @join__type(graph: WORKFORCE)
{
  createTask(data: CreateTaskInput!): Task! @join__field(graph: EQUIP)
  updateTask(data: UpdateTaskInput!): Task! @join__field(graph: EQUIP)
  assignTask(data: AssignTaskInput!): Task! @join__field(graph: EQUIP)
  startTaskProgress(data: TaskIdInput!): Task! @join__field(graph: EQUIP)
  submitTask(data: TaskIdInput!): Task! @join__field(graph: EQUIP)
  approveTask(data: TaskIdInput!): Task! @join__field(graph: EQUIP)
  completeTask(data: TaskIdInput!): Task! @join__field(graph: EQUIP)
  addTaskComment(data: AddTaskCommentInput!): TaskComment! @join__field(graph: EQUIP)
  createMember(data: CreateMemberInput!): Member! @join__field(graph: WORKFORCE)
  enableMember(data: EnableMemberInput!): Member! @join__field(graph: WORKFORCE)
  createTeam(data: CreateTeamInput!): Team! @join__field(graph: WORKFORCE)
  addMembers(data: AddMembersInput!): Team! @join__field(graph: WORKFORCE)
}

type Query
  @join__type(graph: EQUIP)
  @join__type(graph: WORKFORCE)
{
  tasks: [Task!]! @join__field(graph: EQUIP)
  tasksRequested: [Task!]! @join__field(graph: EQUIP)
  taskActivity(data: TaskIdInput!): [TaskActivity!]! @join__field(graph: EQUIP)
  taskComments(data: TaskIdInput!): [TaskComment!]! @join__field(graph: EQUIP)
  memberInfo: Member! @join__field(graph: WORKFORCE)
}

type Task
  @join__type(graph: EQUIP, key: "id")
{
  id: ID!
  title: String!
  description: String!
  status: String!
  byDepartment: String!
  forDepartment: String!
  deadline: DateTime!
  createdAt: DateTime!
  activity: [TaskActivity!]!
  comments: [TaskComment!]!
  assignee: Member
  createdBy: Member!
}

type TaskActivity
  @join__type(graph: EQUIP, key: "id")
{
  id: ID!
  title: String!
  description: String!
  type: String!
  createdAt: DateTime!
  task: Task!
}

type TaskComment
  @join__type(graph: EQUIP, key: "id")
{
  id: ID!
  content: String!
  createdAt: DateTime!
  task: Task!
  createdBy: Member!
}

input TaskIdInput
  @join__type(graph: EQUIP)
{
  taskId: String!
}

type Team
  @join__type(graph: WORKFORCE, key: "id")
{
  id: ID!
  name: String!
  department: String!
  members: [Member!]!
  createdBy: Member!
}

input UpdateTaskInput
  @join__type(graph: EQUIP)
{
  taskId: String!
  title: String!
  description: String!
  deadline: String!
}